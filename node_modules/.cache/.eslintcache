[{"/home/pranav/Desktop/amfossWebPersonal/frontend/src/index.js":"1","/home/pranav/Desktop/amfossWebPersonal/frontend/src/reportWebVitals.js":"2","/home/pranav/Desktop/amfossWebPersonal/frontend/src/App.js":"3","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Memberdetails.js":"4","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Home.js":"5","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Fielddetails.js":"6","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Nav.js":"7","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Contact.js":"8","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Member.js":"9","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Field.js":"10"},{"size":288,"mtime":1616914840165,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1616179672837,"results":"13","hashOfConfig":"12"},{"size":2018,"mtime":1618741131794,"results":"14","hashOfConfig":"12"},{"size":2811,"mtime":1616914922591,"results":"15","hashOfConfig":"12"},{"size":2970,"mtime":1616914824988,"results":"16","hashOfConfig":"12"},{"size":3042,"mtime":1618757785008,"results":"17","hashOfConfig":"12"},{"size":494,"mtime":1616913766694,"results":"18","hashOfConfig":"12"},{"size":785,"mtime":1616609548591,"results":"19","hashOfConfig":"12"},{"size":648,"mtime":1616913788753,"results":"20","hashOfConfig":"12"},{"size":467,"mtime":1616914067126,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"znpwd5",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},"/home/pranav/Desktop/amfossWebPersonal/frontend/src/index.js",[],"/home/pranav/Desktop/amfossWebPersonal/frontend/src/reportWebVitals.js",[],"/home/pranav/Desktop/amfossWebPersonal/frontend/src/App.js",[],"/home/pranav/Desktop/amfossWebPersonal/frontend/src/Memberdetails.js",["47","48","49","50"],"import React, { useState,useEffect } from 'react'\nimport { useParams } from 'react-router';\nimport './Memberdetails.css'\n\nfunction Memberdetails() {\n\n    const {id} = useParams();\n    const [data, setData] = useState([]);\n\n    //Now what i shoud do is i should make the id of the filed as dynamic so that we can access the Opensourse or Amhacks or CP anything.\n    //Now we can add this query dynamically by that dollar and it should be enclosed in semicolon bcz i had seen an error in netwok tab of inspect saying that we need string.\n    const query = `query{\n        memberById(id:${id}){\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n       }\n     }`\n\n    useEffect(() => {\n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n\n            body: JSON.stringify({query}),\n        };\n\n         fetch('http://127.0.0.1:8000/graphql', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data.data.memberById));\n    },[])\n\n    console.log(data);\n\n    const githuburl= \"https://github.com/\"+data.githubusername;\n    const langurl = \"https://github-readme-stats.vercel.app/api/top-langs/?username=\"+data.githubusername+\"&theme=radical&layout=compact\";\n    const staturl = 'https://github-readme-stats.vercel.app/api?username='+data.githubusername+'&theme=radical&show_icons=true';\n\n    return (\n        <div className='member_details'>\n            <div className=\"upperpart\">\n                <div>\n                <img className='detail_image' src ={data.image} alt=\"There Used to be an Image\" />\n                <p className='memberdetail_name'>{data.name}</p>\n                </div>\n                <div className='contact_details'>\n                    \n                    <div className='githuburl'>\n                        <p><a className='githuburllink'href={githuburl} target='main_page'>Github</a></p>\n                    </div>\n                    <div className='further_contact'>\n                        <br/>\n                        <p>Email:{data.email}</p>\n                        <p>Phone:{data.phone}</p>\n                        <p>Discord:{data.discordusername}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"lowerpart\">\n                <div>\n                    <p className='description'>{data.description}</p>\n                </div>\n                <div className='stats'>\n                    <div> <img className='stat_img' src={staturl} /></div>\n                    <div> <img className='lang_img' src={langurl} /></div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Memberdetails\n","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Home.js",["51","52"],"import React from 'react'\nimport Field from './Field'\nimport './Home.css'\nimport {useState,useEffect} from 'react'\nimport {Link} from 'react-router-dom'\nimport { TwitterTimelineEmbed} from 'react-twitter-embed';\n\n\nfunction Home() {\n\n    //This is to request the server to send \n    //the data from the server by posting a\n    //query.\n    const [data, setData] = useState([]); \n    const [searchTerm,setSearchTerm] = useState('')\n\n    useEffect(() => {\n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: '{\"query\": \"{allCategories{id,name,stackImage}}\"}'\n        };\n\n         fetch('http://127.0.0.1:8000/graphql', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data.data.allCategories));\n    },[])\n    console.log(data);\n\n    //Posting is till here.\n\n    return (\n        <div className='home'>\n            <div>\n                <TwitterTimelineEmbed\n                className='twitterfeed'\n                sourceType=\"profile\"\n                screenName=\"amfoss_in\"\n                theme='dark'\n                noFooter\n                options={{height: 980}}\n                noScrollbar\n                />\n            </div>\n            <div className='home_2'>\n                <div>\n                    <input className='searchbar_home' type='text' placeholder='Search member' onChange={ event => {setSearchTerm(event.target.value)}}/>\n                </div>\n                <img className='landing_image' src='https://i.postimg.cc/yxsJ61rG/4380-removebg-preview.png' alt=''/>\n                <div className='fields'>\n                    {\n\n                        //Here this filter is for showing data according to the serachbar text.\n                        //There we are providing like if it is empty show all the fields or else \n                        //show the field which that text as subpart it shows even it is lowercase \n                        //as we are proving the lowercase optn.\n                        data.filter(\n                            (field)=>{\n                                if(searchTerm==''){\n                                    return field\n                                }else if(field.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                                    return field\n                                }\n                            }\n                        ).map((field) => (\n                                <Link to={`/fielddetails/${field.id}`} style={{textDecoration:'none'}}>\n                                    <Field className='field'\n                                    stack_image={field.stackImage}\n                                    name={field.name}\n                                    />\n                                </Link>\n                        ))\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Home","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Fielddetails.js",["53","54","55","56","57","58","59"],"import React from 'react'\nimport './Fielddetails.css'\nimport Member from './Member'\nimport {useState,useEffect} from 'react'\nimport { Link, useParams } from 'react-router-dom'\n\n{/* In this component we are getting for getting the\n members by category id i had created a schema in the django\n and there here i am using the id for getting all the details \n and to show those details in the Fielddetails page.*/}\n\nfunction Fielddetails() {\n\n    const {id} = useParams();\n    const [data, setData] = useState([]);\n    const [searchmember,setSearchmember] = useState('')\n\n    {/* Here I had created an schema in backend for making a query and getting the members by id of the category\n    This is bcz as we know th id of the field it will become easy to link these by that Route\n    Parameters. */}\n\n    {/*Now what we shoud do is we should make the id of the field as dynamic so that \n       we can access the Opensourse or Amhacks or CP anything and that can be achieved \n       by dollar sign with `` in JS*/}\n    \n    const query = `query{\n        categoryById(id:${id}){\n          members{\n           id\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n         }\n       }\n     }`\n\n    useEffect(() => {\n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n\n            body: JSON.stringify({query}),\n        };\n\n        {/*Here we have to get the members so we are writing like data.data.categoryById.members */}\n         \n        fetch('http://127.0.0.1:8000/graphql', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data.data.categoryById.members));\n    },[])\n\n    console.log(data);\n\n    return (\n\n        <div>\n            <div>\n            <input className='searchbar_members' placeholder='Search Member' type='text' onChange={(event) => {setSearchmember(event.target.value)}}/>\n            </div>\n            <div className='members'>\n            {\n                //Here we are mapping that each data name and intro to each member \n                //and linking to the respective member detail page using that Route Parameters by that {`/members/${member.id}`} \n                data.filter((member)=>{\n                    if(searchmember==''){\n                        return member\n                    }else if(member.name.toLowerCase().includes(searchmember.toLowerCase())){\n                        return member\n                    }\n                }).map((member) => (\n                    <Link to={`/members/${member.id}`} style={{textDecoration:'none'}}>\n                    <Member\n                    name={member.name}\n                    image='https://www.w3schools.com/w3css/img_avatar3.png'\n                    intro={member.intro}\n                    />\n                    </Link>\n                ))\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default Fielddetails            ","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Nav.js",[],"/home/pranav/Desktop/amfossWebPersonal/frontend/src/Contact.js",[],"/home/pranav/Desktop/amfossWebPersonal/frontend/src/Member.js",["60"],"import React from 'react'\nimport './Member.css'\n\nfunction Member({image,name,intro}) {\n    return (\n        <div className='member'>\n            <div className=\"card\">\n                <header>\n                    <h className='member_name'>{name}</h>\n                </header>\n                <hr></hr>\n                <div className='shortinfo'>\n                    <div>\n                        <img className='member_image' src={image}/>\n                    </div>\n                    <div>\n                        <p>{intro}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Member\n","/home/pranav/Desktop/amfossWebPersonal/frontend/src/Field.js",["61"],"import React from 'react';\nimport './Field.css';\n{/* This Component is the Field Component which takes the name and stack img as \nprops and displays like a card in the Home Page. */}\nfunction Field({name,stack_image}) {\n    return (\n        <div className='field'>\n            <img className='stack_image' src={stack_image} alt=''/>\n            <div className='field_name'>\n                <p>{name}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Field",{"ruleId":"62","severity":1,"message":"63","line":36,"column":7,"nodeType":"64","endLine":36,"endColumn":9,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":48,"column":17,"nodeType":"68","endLine":48,"endColumn":99},{"ruleId":"69","severity":1,"message":"70","line":69,"column":27,"nodeType":"68","endLine":69,"endColumn":69},{"ruleId":"69","severity":1,"message":"70","line":70,"column":27,"nodeType":"68","endLine":70,"endColumn":69},{"ruleId":"71","severity":1,"message":"72","line":58,"column":36,"nodeType":"73","messageId":"74","endLine":58,"endColumn":38},{"ruleId":"75","severity":1,"message":"76","line":59,"column":46,"nodeType":"77","messageId":"78","endLine":59,"endColumn":48},{"ruleId":"79","severity":1,"message":"80","line":7,"column":1,"nodeType":"81","messageId":"82","endLine":10,"endColumn":56},{"ruleId":"79","severity":1,"message":"83","line":18,"column":5,"nodeType":"81","messageId":"84","endLine":20,"endColumn":20},{"ruleId":"79","severity":1,"message":"83","line":22,"column":5,"nodeType":"81","messageId":"84","endLine":24,"endColumn":39},{"ruleId":"79","severity":1,"message":"83","line":50,"column":9,"nodeType":"81","messageId":"84","endLine":50,"endColumn":101},{"ruleId":"62","severity":1,"message":"63","line":55,"column":7,"nodeType":"64","endLine":55,"endColumn":9,"suggestions":"85"},{"ruleId":"71","severity":1,"message":"72","line":69,"column":37,"nodeType":"73","messageId":"74","endLine":69,"endColumn":39},{"ruleId":"75","severity":1,"message":"76","line":70,"column":36,"nodeType":"77","messageId":"78","endLine":70,"endColumn":38},{"ruleId":"69","severity":1,"message":"70","line":14,"column":25,"nodeType":"68","endLine":14,"endColumn":68},{"ruleId":"79","severity":1,"message":"80","line":3,"column":1,"nodeType":"81","messageId":"82","endLine":4,"endColumn":53},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'query'. Either include it or remove the dependency array.","ArrayExpression",["86"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","Nested block is redundant.","redundantNestedBlock",["87"],{"desc":"88","fix":"89"},{"desc":"88","fix":"90"},"Update the dependencies array to be: [query]",{"range":"91","text":"92"},{"range":"93","text":"92"},[1139,1141],"[query]",[1782,1784]]