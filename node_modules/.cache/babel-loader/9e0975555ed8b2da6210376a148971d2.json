{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isRequiredIf from 'react-proptype-conditional-require';\nimport ExecutionEnvironment from 'exenv';\nvar twitterWidgetJs = 'https://platform.twitter.com/widgets.js';\n\nvar TwitterTimelineEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterTimelineEmbed, _Component);\n\n  function TwitterTimelineEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTimelineEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTimelineEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterTimelineEmbed, [{\n    key: \"buildChromeOptions\",\n    value: function buildChromeOptions(options) {\n      options.chrome = '';\n\n      if (this.props.noHeader) {\n        options.chrome = options.chrome + ' noheader';\n      }\n\n      if (this.props.noFooter) {\n        options.chrome = options.chrome + ' nofooter';\n      }\n\n      if (this.props.noBorders) {\n        options.chrome = options.chrome + ' noborders';\n      }\n\n      if (this.props.noScrollbar) {\n        options.chrome = options.chrome + ' noscrollbar';\n      }\n\n      if (this.props.transparent) {\n        options.chrome = options.chrome + ' transparent';\n      }\n\n      return options;\n    }\n  }, {\n    key: \"buildOptions\",\n    value: function buildOptions() {\n      var options = Object.assign({}, this.props.options);\n\n      if (this.props.autoHeight) {\n        options.height = this.refs.embedContainer.parentNode.offsetHeight;\n      }\n\n      options = Object.assign({}, options, {\n        theme: this.props.theme,\n        linkColor: this.props.linkColor,\n        borderColor: this.props.borderColor,\n        lang: this.props.lang\n      });\n      return options;\n    }\n  }, {\n    key: \"renderWidget\",\n    value: function renderWidget(options) {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTimeline({\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        }, this.refs.embedContainer, options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.');\n            return;\n          }\n\n          var options = _this3.buildOptions();\n          /** Append chrome options */\n\n\n          options = _this3.buildChromeOptions(options);\n\n          _this3.renderWidget(options);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterTimelineEmbed;\n}(Component);\n\n_defineProperty(TwitterTimelineEmbed, \"propTypes\", {\n  /**\n       * This can be either of profile, likes, list, collection, URL, widget\n       */\n  sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n\n  /**\n       * username of twitter handle as String\n       */\n  screenName: isRequiredIf(PropTypes.string, function (props) {\n    return !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * UserId of twitter handle as number\n       */\n  userId: isRequiredIf(PropTypes.number, function (props) {\n    return !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes');\n  }),\n\n  /**\n       * To show list, used along with slug\n       */\n  ownerScreenName: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, used along with ownerScreenName\n       */\n  slug: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('id');\n  }),\n\n  /**\n       * To show list, unique list id\n       * Also used with collections, in that case its valid collection id\n       */\n  id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), function (props) {\n    return props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug') || props.sourceType === 'collection';\n  }),\n\n  /**\n       * To show twitter content with url.\n       * Supported content includes profiles, likes, lists, and collections.\n       */\n  url: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'url';\n  }),\n\n  /**\n       * To show custom widget\n       */\n  widgetId: isRequiredIf(PropTypes.string, function (props) {\n    return props.sourceType === 'widget';\n  }),\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n\n  /**\n       * Automatically fit into parent container height\n       */\n  autoHeight: PropTypes.bool,\n\n  /**\n       * With dark or light theme\n       */\n  theme: PropTypes.oneOf(['dark', 'light']),\n\n  /**\n       * With custom link colors. Note: Only Hex colors are supported.\n       */\n  linkColor: PropTypes.string,\n\n  /**\n       * With custom border colors. Note: Only Hex colors are supported.\n       */\n  borderColor: PropTypes.string,\n\n  /**\n       * Hide the header from timeline\n       */\n  noHeader: PropTypes.bool,\n\n  /**\n       * Hide the footer from timeline\n       */\n  noFooter: PropTypes.bool,\n\n  /**\n       * Hide the border from timeline\n       */\n  noBorders: PropTypes.bool,\n\n  /**\n       * Hide the scrollbars\n       */\n  noScrollbar: PropTypes.bool,\n\n  /**\n       * Enable Transparancy\n       */\n  transparent: PropTypes.bool,\n\n  /**\n       * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n       */\n  lang: PropTypes.string,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterShareButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterShareButton, _Component);\n\n  function TwitterShareButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterShareButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterShareButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterShareButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterShareButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createShareButton(_this2.props.url, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterShareButton;\n}(Component);\n\n_defineProperty(TwitterShareButton, \"propTypes\", {\n  /**\n  * Url for sharing\n  */\n  url: PropTypes.string.isRequired,\n\n  /**\n  * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n  */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterFollowButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterFollowButton, _Component);\n\n  function TwitterFollowButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterFollowButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterFollowButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterFollowButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createFollowButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterFollowButton;\n}(Component);\n\n_defineProperty(TwitterFollowButton, \"propTypes\", {\n  /**\n       * Username of twitter user which will be followed on click\n       */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterHashtagButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterHashtagButton, _Component);\n\n  function TwitterHashtagButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterHashtagButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterHashtagButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterHashtagButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createHashtagButton(_this2.props.tag, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterHashtagButton;\n}(Component);\n\n_defineProperty(TwitterHashtagButton, \"propTypes\", {\n  /**\n       * Tag name for hashtag button\n       */\n  tag: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to be added to the button\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterMentionButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterMentionButton, _Component);\n\n  function TwitterMentionButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterMentionButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMentionButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterMentionButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMentionButton(_this2.props.screenName, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterMentionButton;\n}(Component);\n\n_defineProperty(TwitterMentionButton, \"propTypes\", {\n  /**\n   * Username to which you will need to tweet\n   */\n  screenName: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterTweetEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterTweetEmbed, _Component);\n\n  function TwitterTweetEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterTweetEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterTweetEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterTweetEmbed, [{\n    key: \"renderWidget\",\n    value: function renderWidget() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (!window.twttr) {\n        console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.');\n        return;\n      }\n\n      if (!this.isMountCanceled) {\n        window.twttr.widgets.createTweet(this.props.tweetId, this.refs.embedContainer, this.props.options).then(function (element) {\n          _this2.setState({\n            isLoading: false\n          });\n\n          if (onLoad) {\n            onLoad(element);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          _this3.renderWidget();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterTweetEmbed;\n}(Component);\n\n_defineProperty(TwitterTweetEmbed, \"propTypes\", {\n  /**\n       * Tweet id that needs to be shown\n       */\n  tweetId: PropTypes.string.isRequired,\n\n  /**\n       * Additional options to pass to twitter widget plugin\n       */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterMomentShare = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterMomentShare, _Component);\n\n  function TwitterMomentShare(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterMomentShare);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterMomentShare).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterMomentShare, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createMoment(_this2.props.momentId, _this2.refs.shareMoment, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"shareMoment\"\n      }));\n    }\n  }]);\n\n  return TwitterMomentShare;\n}(Component);\n\n_defineProperty(TwitterMomentShare, \"propTypes\", {\n  /**\n   * id of Twitter moment to show\n   */\n  momentId: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterDMButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterDMButton, _Component);\n\n  function TwitterDMButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterDMButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterDMButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterDMButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterDMButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createDMButton(_this2.props.id, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterDMButton;\n}(Component);\n\n_defineProperty(TwitterDMButton, \"propTypes\", {\n  /**\n  * Twitter user id for DM button\n  */\n  id: PropTypes.number.isRequired,\n\n  /**\n  * Additional options to be added to the button\n  */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterVideoEmbed = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterVideoEmbed, _Component);\n\n  function TwitterVideoEmbed(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterVideoEmbed);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterVideoEmbed).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterVideoEmbed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createVideo(_this2.props.id, _this2.refs.embedContainer).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterVideoEmbed;\n}(Component);\n\n_defineProperty(TwitterVideoEmbed, \"propTypes\", {\n  /**\n       * Id of video tweet.\n       */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nvar TwitterOnAirButton = /*#__PURE__*/function (_Component) {\n  _inherits(TwitterOnAirButton, _Component);\n\n  function TwitterOnAirButton(props) {\n    var _this;\n\n    _classCallCheck(this, TwitterOnAirButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TwitterOnAirButton).call(this, props));\n    _this.state = {\n      isLoading: true\n    };\n    return _this;\n  }\n\n  _createClass(TwitterOnAirButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var onLoad = this.props.onLoad;\n\n      if (ExecutionEnvironment.canUseDOM) {\n        var script = require('scriptjs');\n\n        script(twitterWidgetJs, 'twitter-embed', function () {\n          if (!window.twttr) {\n            console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.');\n            return;\n          }\n\n          if (!_this2.isMountCanceled) {\n            window.twttr.widgets.createPeriscopeOnAirButton(_this2.props.username, _this2.refs.embedContainer, _this2.props.options).then(function (element) {\n              _this2.setState({\n                isLoading: false\n              });\n\n              if (onLoad) {\n                onLoad(element);\n              }\n            });\n          }\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.isMountCanceled = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      var placeholder = this.props.placeholder;\n      return React.createElement(React.Fragment, null, isLoading && placeholder, React.createElement(\"div\", {\n        ref: \"embedContainer\"\n      }));\n    }\n  }]);\n\n  return TwitterOnAirButton;\n}(Component);\n\n_defineProperty(TwitterOnAirButton, \"propTypes\", {\n  /**\n   * Username for which you require periscope on air button\n   */\n  username: PropTypes.string.isRequired,\n\n  /**\n   * Additional options for overriding config.\n   */\n  options: PropTypes.object,\n\n  /**\n   * Placeholder while tweet is loading\n   */\n  placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n\n  /**\n   * Function to execute after load, return html element\n   */\n  onLoad: PropTypes.func\n});\n\nexport { TwitterTimelineEmbed, TwitterShareButton, TwitterFollowButton, TwitterHashtagButton, TwitterMentionButton, TwitterTweetEmbed, TwitterMomentShare, TwitterDMButton, TwitterVideoEmbed, TwitterOnAirButton };","map":{"version":3,"sources":["../src/components/twitter-widget-url.js","../src/components/TwitterTimelineEmbed.js","../src/components/TwitterShareButton.js","../src/components/TwitterFollowButton.js","../src/components/TwitterHashtagButton.js","../src/components/TwitterMentionButton.js","../src/components/TwitterTweetEmbed.js","../src/components/TwitterMomentShare.js","../src/components/TwitterDMButton.js","../src/components/TwitterVideoEmbed.js","../src/components/TwitterOnAirButton.js"],"names":["twitterWidgetJs","TwitterTimelineEmbed","Component","sourceType","PropTypes","screenName","isRequiredIf","props","userId","ownerScreenName","slug","id","url","widgetId","options","autoHeight","theme","linkColor","borderColor","noHeader","noFooter","noBorders","noScrollbar","transparent","lang","placeholder","onLoad","func","isLoading","Object","window","ExecutionEnvironment","script","require","console","TwitterShareButton","TwitterFollowButton","TwitterHashtagButton","tag","TwitterMentionButton","TwitterTweetEmbed","tweetId","TwitterMomentShare","momentId","TwitterDMButton","TwitterVideoEmbed","TwitterOnAirButton","username"],"mappings":"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","sourcesContent":["const twitterWidgetJs = 'https://platform.twitter.com/widgets.js'\nexport default twitterWidgetJs\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport isRequiredIf from 'react-proptype-conditional-require'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTimelineEmbed extends Component {\n  static propTypes = {\n    /**\n         * This can be either of profile, likes, list, collection, URL, widget\n         */\n    sourceType: PropTypes.oneOf(['profile', 'likes', 'list', 'collection', 'url', 'widget']).isRequired,\n    /**\n         * username of twitter handle as String\n         */\n    screenName: isRequiredIf(PropTypes.string, props => !props.hasOwnProperty('userId') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * UserId of twitter handle as number\n         */\n    userId: isRequiredIf(PropTypes.number, props => !props.hasOwnProperty('screenName') && (props.sourceType === 'profile' || props.sourceType === 'likes')),\n    /**\n         * To show list, used along with slug\n         */\n    ownerScreenName: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, used along with ownerScreenName\n         */\n    slug: isRequiredIf(PropTypes.string, props => props.sourceType === 'list' && !props.hasOwnProperty('id')),\n    /**\n         * To show list, unique list id\n         * Also used with collections, in that case its valid collection id\n         */\n    id: isRequiredIf(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), props => (props.sourceType === 'list' && !props.hasOwnProperty('ownerScreenName') && !props.hasOwnProperty('slug')) || props.sourceType === 'collection'),\n    /**\n         * To show twitter content with url.\n         * Supported content includes profiles, likes, lists, and collections.\n         */\n    url: isRequiredIf(PropTypes.string, props => props.sourceType === 'url'),\n    /**\n         * To show custom widget\n         */\n    widgetId: isRequiredIf(PropTypes.string, props => props.sourceType === 'widget'),\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n         * Automatically fit into parent container height\n         */\n    autoHeight: PropTypes.bool,\n    /**\n         * With dark or light theme\n         */\n    theme: PropTypes.oneOf(['dark', 'light']),\n    /**\n         * With custom link colors. Note: Only Hex colors are supported.\n         */\n    linkColor: PropTypes.string,\n    /**\n         * With custom border colors. Note: Only Hex colors are supported.\n         */\n    borderColor: PropTypes.string,\n    /**\n         * Hide the header from timeline\n         */\n    noHeader: PropTypes.bool,\n    /**\n         * Hide the footer from timeline\n         */\n    noFooter: PropTypes.bool,\n    /**\n         * Hide the border from timeline\n         */\n    noBorders: PropTypes.bool,\n    /**\n         * Hide the scrollbars\n         */\n    noScrollbar: PropTypes.bool,\n    /**\n         * Enable Transparancy\n         */\n    transparent: PropTypes.bool,\n    /**\n         * Custom language code. Supported codes here: https://developer.twitter.com/en/docs/twitter-for-websites/twitter-for-websites-supported-languages/overview.html\n         */\n    lang: PropTypes.string,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  buildChromeOptions(options) {\n    options.chrome = ''\n    if (this.props.noHeader) { options.chrome = options.chrome + ' noheader' }\n\n    if (this.props.noFooter) { options.chrome = options.chrome + ' nofooter' }\n\n    if (this.props.noBorders) { options.chrome = options.chrome + ' noborders' }\n\n    if (this.props.noScrollbar) { options.chrome = options.chrome + ' noscrollbar' }\n\n    if (this.props.transparent) { options.chrome = options.chrome + ' transparent' }\n\n    return options\n  }\n\n  buildOptions() {\n    let options = Object.assign({}, this.props.options)\n    if (this.props.autoHeight) { options.height = this.refs.embedContainer.parentNode.offsetHeight }\n\n    options = Object.assign({}, options, {\n      theme: this.props.theme,\n      linkColor: this.props.linkColor,\n      borderColor: this.props.borderColor,\n      lang: this.props.lang\n    })\n\n    return options\n  }\n\n  renderWidget(options) {\n    const { onLoad } = this.props\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTimeline(\n        {\n          sourceType: this.props.sourceType,\n          screenName: this.props.screenName,\n          userId: this.props.userId,\n          ownerScreenName: this.props.ownerScreenName,\n          slug: this.props.slug,\n          id: this.props.id || this.props.widgetId,\n          url: this.props.url\n        },\n        this.refs.embedContainer,\n        options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterTimelineEmbed, aborting load.')\n          return\n        }\n\n        let options = this.buildOptions()\n        /** Append chrome options */\n        options = this.buildChromeOptions(options)\n        this.renderWidget(options)\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterShareButton extends Component {\n  static propTypes = {\n    /**\n    * Url for sharing\n    */\n    url: PropTypes.string.isRequired,\n    /**\n    * Additional options for overriding config. Details at : https://dev.twitter.com/web/tweet-button/parameters\n    */\n    options: PropTypes.object,\n\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterShareButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createShareButton(\n            this.props.url,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterFollowButton extends Component {\n  static propTypes = {\n    /**\n         * Username of twitter user which will be followed on click\n         */\n    screenName: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterFollowButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createFollowButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterHashtagButton extends Component {\n  static propTypes = {\n    /**\n         * Tag name for hashtag button\n         */\n    tag: PropTypes.string.isRequired,\n    /**\n         * Additional options to be added to the button\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterHashtagButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createHashtagButton(\n            this.props.tag,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMentionButton extends Component {\n  static propTypes = {\n    /**\n     * Username to which you will need to tweet\n     */\n    screenName: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMentionButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMentionButton(\n            this.props.screenName,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterTweetEmbed extends Component {\n  static propTypes = {\n    /**\n         * Tweet id that needs to be shown\n         */\n    tweetId: PropTypes.string.isRequired,\n    /**\n         * Additional options to pass to twitter widget plugin\n         */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  renderWidget() {\n    const { onLoad } = this.props\n    if (!window.twttr) {\n      console.error('Failure to load window.twttr in TwitterTweetEmbed, aborting load.')\n      return\n    }\n    if (!this.isMountCanceled) {\n      window.twttr.widgets.createTweet(\n        this.props.tweetId,\n        this.refs.embedContainer,\n        this.props.options\n      ).then((element) => {\n        this.setState({\n          isLoading: false\n        })\n        if (onLoad) {\n          onLoad(element)\n        }\n      })\n    }\n  }\n\n  componentDidMount() {\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        this.renderWidget()\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterMomentShare extends Component {\n  static propTypes = {\n    /**\n     * id of Twitter moment to show\n     */\n    momentId: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterMomentShare, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createMoment(\n            this.props.momentId,\n            this.refs.shareMoment,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='shareMoment' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterDMButton extends Component {\n  static propTypes = {\n    /**\n    * Twitter user id for DM button\n    */\n    id: PropTypes.number.isRequired,\n    /**\n    * Additional options to be added to the button\n    */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterDMButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createDMButton(\n            this.props.id,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterVideoEmbed extends Component {\n  static propTypes = {\n    /**\n         * Id of video tweet.\n         */\n    id: PropTypes.string.isRequired,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterVideoEmbed, aborting load.')\n          return\n        }\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createVideo(\n            this.props.id,\n            this.refs.embedContainer\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport ExecutionEnvironment from 'exenv'\nimport twitterWidgetJs from './twitter-widget-url'\n\nexport default class TwitterOnAirButton extends Component {\n  static propTypes = {\n    /**\n     * Username for which you require periscope on air button\n     */\n    username: PropTypes.string.isRequired,\n    /**\n     * Additional options for overriding config.\n     */\n    options: PropTypes.object,\n    /**\n     * Placeholder while tweet is loading\n     */\n    placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n    /**\n     * Function to execute after load, return html element\n     */\n    onLoad: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isLoading: true\n    }\n  }\n\n  componentDidMount() {\n    const { onLoad } = this.props\n    if (ExecutionEnvironment.canUseDOM) {\n      let script = require('scriptjs')\n      script(twitterWidgetJs, 'twitter-embed', () => {\n        if (!window.twttr) {\n          console.error('Failure to load window.twttr in TwitterOnAirButton, aborting load.')\n          return\n        }\n\n        if (!this.isMountCanceled) {\n          window.twttr.widgets.createPeriscopeOnAirButton(\n            this.props.username,\n            this.refs.embedContainer,\n            this.props.options\n          ).then((element) => {\n            this.setState({\n              isLoading: false\n            })\n            if (onLoad) {\n              onLoad(element)\n            }\n          })\n        }\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    this.isMountCanceled = true\n  }\n\n  render() {\n    const { isLoading } = this.state\n    const { placeholder } = this.props\n    return (\n      <React.Fragment>\n        {isLoading && placeholder}\n        <div ref='embedContainer' />\n      </React.Fragment>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}