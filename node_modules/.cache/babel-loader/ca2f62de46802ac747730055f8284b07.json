{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Desktop/personal project/frontend/knoweach/src/Fielddetails.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Field from './Field';\nimport './Fielddetails.css';\nimport Member from './Member';\nimport { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Fielddetails() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [data, setData] = useState([]);\n  const [searchmember, setSearchmember] = useState(''); //Now what i shoud do is i should make the name of the filed as dynamic so that we can access the Opensourse or Amhacks or CP anything.\n  //Now we can add this query dynamically by that dollar and it should be enclosed in semicolon bcz i had seen an error in netwok tab of inspect saying that we need string.\n\n  {\n    /* Here I had created an schema in backend for making a query and getting the members by id of the category\n    This is bcz as we know th id of the field it will become easy to link these by that Route\n    Parameters. */\n  }\n  const query = `query{\n        categoryById(id:${id}){\n          members{\n           id\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n         }\n       }\n     }`;\n  useEffect(() => {\n    const sendingPost = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    {\n      /*Here we have to get the members so we are writing like data.data.categoryById.members */\n    }\n    fetch('http://127.0.0.1:8000/graphql', sendingPost).then(response => response.json()).then(data => setData(data.data.categoryById.members));\n  }, []);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"members\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: event => {\n        setSearchmember(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), //Here we are mapping that each data name and intro to each meber \n    //and linking to the respective member detail page using that Route Parameters.\n    data.filter(member => {\n      if (searchTerm == '') {\n        return member;\n      } else if (field.name.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return field;\n      }\n    }).map(member => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-preview\",\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `/members/${member.id}`,\n        style: {\n          textDecoration: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Member, {\n          name: member.name,\n          image: \"https://www.w3schools.com/w3css/img_avatar3.png\",\n          intro: member.intro\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this)\n    }, member.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Fielddetails, \"6aqeSUgCa1UG2VtKTU/u1e2i9kU=\", false, function () {\n  return [useParams];\n});\n\n_c = Fielddetails;\nexport default Fielddetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fielddetails\");","map":{"version":3,"sources":["/home/pranav/Desktop/personal project/frontend/knoweach/src/Fielddetails.js"],"names":["React","Field","Member","useState","useEffect","Link","useParams","Fielddetails","id","data","setData","searchmember","setSearchmember","query","sendingPost","method","headers","body","JSON","stringify","fetch","then","response","json","categoryById","members","console","log","event","target","value","filter","member","searchTerm","field","name","toLowerCase","includes","map","textDecoration","intro"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;;;AAGA,SAASC,YAAT,GAAwB;AAAA;;AAEpB,QAAM;AAACC,IAAAA;AAAD,MAAOF,SAAS,EAAtB;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,YAAD,EAAcC,eAAd,IAAiCT,QAAQ,CAAC,EAAD,CAA/C,CALoB,CAMpB;AAEA;;AAEA;AAAC;AACL;AACA;AAAmB;AACf,QAAMU,KAAK,GAAI;AACnB,0BAA0BL,EAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAdI;AAiBAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,WAAW,GAAG;AAChBC,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFO;AAIhBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA;AAAD,OAAf;AAJU,KAApB;AAOA;AAAC;AAA2F;AAC3FO,IAAAA,KAAK,CAAC,+BAAD,EAAkCN,WAAlC,CAAL,CACIO,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAESZ,IAAI,IAAIC,OAAO,CAACD,IAAI,CAACA,IAAL,CAAUe,YAAV,CAAuBC,OAAxB,CAFxB;AAGJ,GAZQ,EAYP,EAZO,CAAT;AAcAC,EAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,sBAEI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGmB,KAAD,IAAW;AAAChB,QAAAA,eAAe,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAAoC;AAA7E;AAAA;AAAA;AAAA;AAAA,YADJ,EAGQ;AACA;AACArB,IAAAA,IAAI,CAACsB,MAAL,CAAaC,MAAD,IAAU;AAClB,UAAGC,UAAU,IAAE,EAAf,EAAkB;AACd,eAAOD,MAAP;AACH,OAFD,MAEM,IAAGE,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCJ,UAAU,CAACG,WAAX,EAAlC,CAAH,EAA+D;AACjE,eAAOF,KAAP;AACH;AACJ,KAND,EAMGI,GANH,CAMQN,MAAD,iBACH;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACA,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,YAAWA,MAAM,CAACxB,EAAG,EAAhC;AAAmC,QAAA,KAAK,EAAE;AAAC+B,UAAAA,cAAc,EAAC;AAAhB,SAA1C;AAAA,+BACA,QAAC,MAAD;AACA,UAAA,IAAI,EAAEP,MAAM,CAACG,IADb;AAEA,UAAA,KAAK,EAAC,iDAFN;AAGA,UAAA,KAAK,EAAEH,MAAM,CAACQ;AAHd;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA,OAAqCR,MAAM,CAACxB,EAA5C;AAAA;AAAA;AAAA;AAAA,YAPJ,CALR;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA2BH;;GAzEQD,Y;UAEQD,S;;;KAFRC,Y;AA2ET,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport Field from './Field'\nimport './Fielddetails.css'\nimport Member from './Member'\nimport {useState,useEffect} from 'react'\nimport { Link, useParams } from 'react-router-dom'\n\n\nfunction Fielddetails() {\n\n    const {id} = useParams();\n\n    const [data, setData] = useState([]);\n    const [searchmember,setSearchmember] = useState('')\n    //Now what i shoud do is i should make the name of the filed as dynamic so that we can access the Opensourse or Amhacks or CP anything.\n\n    //Now we can add this query dynamically by that dollar and it should be enclosed in semicolon bcz i had seen an error in netwok tab of inspect saying that we need string.\n\n    {/* Here I had created an schema in backend for making a query and getting the members by id of the category\n    This is bcz as we know th id of the field it will become easy to link these by that Route\n    Parameters. */}\n    const query = `query{\n        categoryById(id:${id}){\n          members{\n           id\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n         }\n       }\n     }`\n\n\n    useEffect(() => {\n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n\n            body: JSON.stringify({query}),\n        };\n\n        {/*Here we have to get the members so we are writing like data.data.categoryById.members */}\n         fetch('http://127.0.0.1:8000/graphql', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data.data.categoryById.members));\n    },[])\n\n    console.log(data);\n\n    return (\n\n        <div className='members'>\n            <input type='text' onChange={(event) => {setSearchmember(event.target.value)}}/>\n            {\n                //Here we are mapping that each data name and intro to each meber \n                //and linking to the respective member detail page using that Route Parameters.\n                data.filter((member)=>{\n                    if(searchTerm==''){\n                        return member\n                    }else if(field.name.toLowerCase().includes(searchTerm.toLowerCase())){\n                        return field\n                    }\n                }).map((member) => (\n                    <div className='member-preview' key={member.id}>\n                    <Link to={`/members/${member.id}`} style={{textDecoration:'none'}}>\n                    <Member\n                    name={member.name}\n                    image='https://www.w3schools.com/w3css/img_avatar3.png'\n                    intro={member.intro}\n                    />\n                    </Link>\n                    </div>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Fielddetails            "]},"metadata":{},"sourceType":"module"}