{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Desktop/personal project/frontend/knoweach/src/Fielddetails.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './Fielddetails.css';\nimport Member from './Member';\nimport { useState, useEffect } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /* In this component we are getting for getting the\n  members by category id i had created a schema in the django\n  and there here i am using the id for getting all the details \n  and to show those details in the Fielddetails page.*/\n}\n\nfunction Fielddetails() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [data, setData] = useState([]);\n  const [searchmember, setSearchmember] = useState('');\n  {\n    /* Here I had created an schema in backend for making a query and getting the members by id of the category\n    This is bcz as we know th id of the field it will become easy to link these by that Route\n    Parameters. */\n  }\n  {\n    /*Now what we shoud do is we should make the id of the field as dynamic so that \n      we can access the Opensourse or Amhacks or CP anything.*/\n  } //Now we can add this query dynamically by that dollar and it should be enclosed in semicolon bcz i had seen an error in netwok tab of inspect saying that we need string.\n\n  const query = `query{\n        categoryById(id:${id}){\n          members{\n           id\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n         }\n       }\n     }`;\n  useEffect(() => {\n    const sendingPost = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    };\n    {\n      /*Here we have to get the members so we are writing like data.data.categoryById.members */\n    }\n    fetch('http://127.0.0.1:8000/graphql', sendingPost).then(response => response.json()).then(data => setData(data.data.categoryById.members));\n  }, []);\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchbar_members\",\n        placeholder: \"Search Member\",\n        type: \"text\",\n        onChange: event => {\n          setSearchmember(event.target.value);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"members\",\n      children: //Here we are mapping that each data name and intro to each meber \n      //and linking to the respective member detail page using that Route Parameters.\n      data.filter(member => {\n        if (searchmember == '') {\n          return member;\n        } else if (member.name.toLowerCase().includes(searchmember.toLowerCase())) {\n          return member;\n        }\n      }).map(member => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/members/${member.id}`,\n        style: {\n          textDecoration: 'none'\n        },\n        children: /*#__PURE__*/_jsxDEV(Member, {\n          name: member.name,\n          image: \"https://www.w3schools.com/w3css/img_avatar3.png\",\n          intro: member.intro\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Fielddetails, \"6aqeSUgCa1UG2VtKTU/u1e2i9kU=\", false, function () {\n  return [useParams];\n});\n\n_c = Fielddetails;\nexport default Fielddetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"Fielddetails\");","map":{"version":3,"sources":["/home/pranav/Desktop/personal project/frontend/knoweach/src/Fielddetails.js"],"names":["React","Member","useState","useEffect","Link","useParams","Fielddetails","id","data","setData","searchmember","setSearchmember","query","sendingPost","method","headers","body","JSON","stringify","fetch","then","response","json","categoryById","members","console","log","event","target","value","filter","member","name","toLowerCase","includes","map","textDecoration","intro"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,SAASC,IAAT,EAAeC,SAAf,QAAgC,kBAAhC;;AAEA;AAAC;AACD;AACA;AACA;AAAuD;;AAEvD,SAASC,YAAT,GAAwB;AAAA;;AAEpB,QAAM;AAACC,IAAAA;AAAD,MAAOF,SAAS,EAAtB;AAEA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,YAAD,EAAcC,eAAd,IAAiCT,QAAQ,CAAC,EAAD,CAA/C;AAEA;AAAC;AACL;AACA;AAAmB;AAEf;AAAC;AACL;AAAiE,GAZzC,CAcpB;;AAIA,QAAMU,KAAK,GAAI;AACnB,0BAA0BL,EAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAdI;AAiBAJ,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,WAAW,GAAG;AAChBC,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFO;AAIhBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACN,QAAAA;AAAD,OAAf;AAJU,KAApB;AAOA;AAAC;AAA2F;AAE5FO,IAAAA,KAAK,CAAC,+BAAD,EAAkCN,WAAlC,CAAL,CACKO,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUZ,IAAI,IAAIC,OAAO,CAACD,IAAI,CAACA,IAAL,CAAUe,YAAV,CAAuBC,OAAxB,CAFzB;AAGH,GAbQ,EAaP,EAbO,CAAT;AAeAC,EAAAA,OAAO,CAACC,GAAR,CAAYlB,IAAZ;AAEA,sBAEI;AAAA,4BACI;AAAA,6BACA;AAAO,QAAA,SAAS,EAAC,mBAAjB;AAAqC,QAAA,WAAW,EAAC,eAAjD;AAAiE,QAAA,IAAI,EAAC,MAAtE;AAA6E,QAAA,QAAQ,EAAGmB,KAAD,IAAW;AAAChB,UAAAA,eAAe,CAACgB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AAAoC;AAAvI;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAEI;AACA;AACArB,MAAAA,IAAI,CAACsB,MAAL,CAAaC,MAAD,IAAU;AAClB,YAAGrB,YAAY,IAAE,EAAjB,EAAoB;AAChB,iBAAOqB,MAAP;AACH,SAFD,MAEM,IAAGA,MAAM,CAACC,IAAP,CAAYC,WAAZ,GAA0BC,QAA1B,CAAmCxB,YAAY,CAACuB,WAAb,EAAnC,CAAH,EAAkE;AACpE,iBAAOF,MAAP;AACH;AACJ,OAND,EAMGI,GANH,CAMQJ,MAAD,iBACH,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,YAAWA,MAAM,CAACxB,EAAG,EAAhC;AAAmC,QAAA,KAAK,EAAE;AAAC6B,UAAAA,cAAc,EAAC;AAAhB,SAA1C;AAAA,+BACA,QAAC,MAAD;AACA,UAAA,IAAI,EAAEL,MAAM,CAACC,IADb;AAEA,UAAA,KAAK,EAAC,iDAFN;AAGA,UAAA,KAAK,EAAED,MAAM,CAACM;AAHd;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAPJ;AAJJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AA6BH;;GAjFQ/B,Y;UAEQD,S;;;KAFRC,Y;AAmFT,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport './Fielddetails.css'\nimport Member from './Member'\nimport {useState,useEffect} from 'react'\nimport { Link, useParams } from 'react-router-dom'\n\n{/* In this component we are getting for getting the\n members by category id i had created a schema in the django\n and there here i am using the id for getting all the details \n and to show those details in the Fielddetails page.*/}\n\nfunction Fielddetails() {\n\n    const {id} = useParams();\n\n    const [data, setData] = useState([]);\n    const [searchmember,setSearchmember] = useState('')\n\n    {/* Here I had created an schema in backend for making a query and getting the members by id of the category\n    This is bcz as we know th id of the field it will become easy to link these by that Route\n    Parameters. */}\n\n    {/*Now what we shoud do is we should make the id of the field as dynamic so that \n       we can access the Opensourse or Amhacks or CP anything.*/}\n\n    //Now we can add this query dynamically by that dollar and it should be enclosed in semicolon bcz i had seen an error in netwok tab of inspect saying that we need string.\n\n    \n    \n    const query = `query{\n        categoryById(id:${id}){\n          members{\n           id\n           name\n           image\n           intro\n           description\n           githubusername\n           discordusername\n           email\n           phone\n         }\n       }\n     }`\n\n\n    useEffect(() => {\n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n\n            body: JSON.stringify({query}),\n        };\n\n        {/*Here we have to get the members so we are writing like data.data.categoryById.members */}\n         \n        fetch('http://127.0.0.1:8000/graphql', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data.data.categoryById.members));\n    },[])\n\n    console.log(data);\n\n    return (\n\n        <div>\n            <div>\n            <input className='searchbar_members' placeholder='Search Member' type='text' onChange={(event) => {setSearchmember(event.target.value)}}/>\n            </div>\n            <div className='members'>\n            {\n                //Here we are mapping that each data name and intro to each meber \n                //and linking to the respective member detail page using that Route Parameters.\n                data.filter((member)=>{\n                    if(searchmember==''){\n                        return member\n                    }else if(member.name.toLowerCase().includes(searchmember.toLowerCase())){\n                        return member\n                    }\n                }).map((member) => (\n                    <Link to={`/members/${member.id}`} style={{textDecoration:'none'}}>\n                    <Member\n                    name={member.name}\n                    image='https://www.w3schools.com/w3css/img_avatar3.png'\n                    intro={member.intro}\n                    />\n                    </Link>\n                ))\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default Fielddetails            "]},"metadata":{},"sourceType":"module"}